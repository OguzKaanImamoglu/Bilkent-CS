`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: Bilkent University
// Engineer: Alper Karadag, Ziya Erkoc
//
// Create Date: 03.12.2018 19:22:49
// Design Name: Pipeline Processor
// Module Name: pipes
// Project Name: Lab 5
// Target Devices: FPGA BASYS3
// Tool Versions: ?
// Description: Modified by Zeynep CANKARA
//
// Dependencies: Vivado
//
// Revision: 15/04/2019
// Revision 0.02 - File Edited
// Additional Comments: Will Simulated and Implemented on BASYS3
//
//////////////////////////////////////////////////////////////////////////////////

// Define pipes that exist in the PipelinedDatapath.
// The pipe between Writeback (W) and Fetch (F), as well as Fetch (F) and Decode (D) is given to you.
// Create the rest of the pipes where inputs follow the naming conventions in the book.


module PipeFtoD(input logic[31:0] instr, PcPlus4F,
                input logic EN, clk, reset,		// StallD will be connected as this EN
                output logic[31:0] instrD, PcPlus4D);

    always_ff @(posedge clk, posedge reset)begin
        if (reset)begin
            instrD <= 0;
            PcPlus4D <= 0;
        end
        else if(EN)
            begin
            instrD<=instr;
            PcPlus4D<=PcPlus4F;
            end
        else begin
            instrD <= instrD;
            PcPlus4D <= PcPlus4D;
        end
    end
endmodule

// Similarly, the pipe between Writeback (W) and Fetch (F) is given as follows.

module PipeWtoF(input logic[31:0] PC,
                input logic EN, clk, reset,		// StallF will be connected as this EN
                output logic[31:0] PCF);

    always_ff @(posedge clk, posedge reset)begin
        if (reset)
            PCF <= 0;
        else if(EN)
            begin
            PCF<=PC;
            end
        else
            PCF <= PCF;
    end
endmodule

// *******************************************************************************
// Below, you are given the argument lists of the modules PipeDtoE, PipeEtoM, PipeMtoW.
// You should implement them by looking at pipelined processor image given to you.
// Don't forget that these codes are tested but you can always make changes if you want.
// Note that some output logics there for debugging purposes, in other words to trace their values in simulation.
// *******************************************************************************


module PipeDtoE(input logic clr, clk, reset, RegWriteD, MemtoRegD, MemWriteD,
                input logic[2:0] AluControlD,
                input logic AluSrcD, RegDstD, BranchD,
                input logic[31:0] RD1D, RD2D,
                input logic[4:0] RsD, RtD, RdD,
                input logic[31:0] SignImmD,
                input logic[31:0] PCPlus4D,
                    output logic RegWriteE, MemtoRegE, MemWriteE,
                    output logic[2:0] AluControlE,
                    output logic AluSrcE, RegDstE, BranchE,
                    output logic[31:0] RD1E, RD2E,
                    output logic[4:0] RsE, RtE, RdE,
                    output logic[31:0] SignImmE,
                    output logic[31:0] PCPlus4E);

    always_ff @(posedge clk, posedge reset)begin
        // ******************* MY CODE STARTS ************************** /////
        if(reset)
        begin
            // handle control unit signals
            RegWriteE <= 0;
            MemtoRegE <= 0;
            MemWriteE <= 0;
            AluControlE <= 0;
            AluSrcE <= 0;
            RegDstE <= 0;
            BranchE <= 0;

            // handle mux signals for forwarding
            RD1E <= 0;
            RD2E <= 0;

            // handle registers
            RsE <= 0;
            RtE <= 0;
            RdE <= 0;

            // sign extended immediate
            SignImmE <= 0;

            // propagate PC
            PCPlus4E <= 0;
        end
        else if(clr)
        begin
            // Only clear signal which can change architectural state or update memory enough
            // Guranteed by clearing all signals just to be safe
            // handle control unit signals
            RegWriteE <= 0;
            MemtoRegE <= 0;
            MemWriteE <= 0;
            AluControlE <= 0;
            AluSrcE <= 0;
            RegDstE <= 0;
            BranchE <= 0;

            // handle mux signals for forwarding
            RD1E <= 0;
            RD2E <= 0;

            // handle registers
            RsE <= 0;
            RtE <= 0;
            RdE <= 0;

            // sign extended immediate
            SignImmE <= 0;

            // propagate PC
            PCPlus4E <= 0;
        end
        else
        begin
            // handle control unit signals
            RegWriteE <= RegWriteD;
            MemtoRegE <= MemtoRegD;
            MemWriteE <= MemWriteD;
            AluControlE <= AluControlD;
            AluSrcE <= AluSrcD;
            RegDstE <= RegDstD;
            BranchE <= BranchD;

            // handle mux signals for forwarding
            RD1E <= RD1D;
            RD2E <= RD2D;

            // handle registers
            RsE <= RsD;
            RtE <= RtD;
            RdE <= RtD;

            // sign extended immediate
            SignImmE <= SignImmD;

            // propagate PC
            PCPlus4E <= PCPlus4D;
        end
        // ******************* MY CODE ENDS   ************************** /////
    end
endmodule

module PipeEtoM(input logic clk, reset, RegWriteE, MemtoRegE, MemWriteE, BranchE, Zero,
                input logic[31:0] ALUOut,
                input logic [31:0] WriteDataE,
                input logic[4:0] WriteRegE,
                input logic[31:0] PCBranchE,
                    output logic RegWriteM, MemtoRegM, MemWriteM, BranchM, ZeroM,
                    output logic[31:0] ALUOutM,
                    output logic [31:0] WriteDataM,
                    output logic[4:0] WriteRegM,
                    output logic[31:0] PCBranchM);

    always_ff @(posedge clk, posedge reset) begin
        // ******************* MY CODE STARTS ************************** /////
        if (reset)
        begin
            // reset the output signals
            // handle control signals
            RegWriteM <= 0;
            MemtoRegM <= 0;
            MemWriteM <= 0;

            // decision signals for branching
            BranchM <= 0;
            ZeroM <= 0;

            // execute stage ALU result
            ALUOutM <= 0;

            // memory signals
            WriteDataM <= 0;
            WriteRegM <= 0;
            PCBranchM <= 0;
        end
        else
        begin
            // handle control signals
            RegWriteM <= RegWriteE;
            MemtoRegM <= MemtoRegE;
            MemWriteM <= MemWriteE;

            // decision signals for branching
            BranchM <= BranchE;
            ZeroM <= Zero;

            // execute stage ALU result
            ALUOutM <= ALUOut;

            // memory signals
            WriteDataM <= WriteDataE;
            WriteRegM <= WriteRegE;
            PCBranchM <= PCBranchE;
        end
        // ******************* MY CODE ENDS   ************************** /////
    end
endmodule

module PipeMtoW(input logic clk, reset, RegWriteM, MemtoRegM,
                input logic[31:0] ReadDataM, ALUOutM,
                input logic[4:0] WriteRegM,
                    output logic RegWriteW, MemtoRegW,
                    output logic[31:0] ReadDataW, ALUOutW,
                    output logic[4:0] WriteRegW);

		always_ff @(posedge clk, posedge reset) begin
            // ******************* MY CODE STARTS ************************** /////
		    if(reset)
            begin
                // reset all signals
                // control unit signals
                RegWriteW <= 0;
                MemtoRegW <= 0;

                // memory stage values
                ReadDataW <= 0;
                ALUOutW <= 0;
                WriteRegW <= 0;
            end
            else
            begin
                // control unit signals
                RegWriteW <= RegWriteM;
                MemtoRegW <= MemtoRegM;

                // memory stage values
                ReadDataW <= ReadDataM;
                ALUOutW <= ALUOutM;
                WriteRegW <= WriteRegM;
            end
            // ******************* MY CODE ENDS   ************************** /////
        end
endmodule



// *******************************************************************************
// End of the individual pipe definitions.
// ******************************************************************************

// *******************************************************************************
// Below is the definition of the datapath.
// The signature of the module is given. The datapath will include (not limited to) the following items:
//  (1) Adder that adds 4 to PC [done]
//  (2) Shifter that shifts SignImmE to left by 2 [done]
//  (3) Sign extender and Register file [done]
//  (4) PipeFtoD [done]
//  (5) PipeDtoE and ALU [done]
//  (5) Adder for PCBranchM [done]
//  (6) PipeEtoM and Data Memory [done]
//  (7) PipeMtoW [done]
//  (8) Many muxes [done]
//  (9) Hazard unit [done]
//  ...?
// *******************************************************************************

module datapath (input  logic clk, reset,
		         input logic [31:0] PCF, instr,
		         input logic RegWriteD, MemtoRegD, MemWriteD,
		         input logic [2:0] ALUControlD,
		         input logic AluSrcD, RegDstD, BranchD,
		             output logic PCSrcM, StallD, StallF,
		             output logic[31:0] PCBranchM, PCPlus4F, instrD, ALUOut, ResultW, WriteDataM);

	// ********************************************************************
	// Here, define the wires (logics) that are needed inside this pipelined datapath module
    // You are given the wires connecting the Hazard Unit.
    // Notice that StallD and StallF are given as output for debugging
	// ********************************************************************

	logic ForwardAD, ForwardBD,  FlushE;
	logic [1:0] ForwardAE, ForwardBE;
	// Add necessary wires (logics).

    // ------- NEW LOGICS -------//
    logic [31:0] RD1E, RD2E, ALUOutM, SrcAE, SrcBE, WriteDataE, RD1D, RD2D, SignImmEShifted, SignImmD, PCBranchE, PCPlus4D, SignImmE, PCPlus4E;
    logic [2:0] AluControlE;
    logic Zero, RegWriteE, MemtoRegE, MemWriteE;
    logic AluSrcE, RegDstE, BranchE;
    logic [4:0] WriteRegE, WriteRegM, WriteRegW;
    logic RegWriteM, MemtoRegM, MemWriteM, BranchM, ZeroM;
    logic [31:0] ReadDataM, ReadDataW, ALUOutW;
    logic RegWriteW, MemtoRegW;
    logic [4:0] RsD, RdD, RtD, RsE, RtE, RdE;
    // ------- END NEW LOGICS ---//

	// ********************************************************************
	// Instantiate the required modules below in the order of the datapath flow.
	// ********************************************************************

    // ============ Modified According to prompt ======== //
	assign PCSrcM = (BranchM & ZeroM);
	assign RsD = instrD[25:21];
    assign RtD = instrD[20:16];
    assign RdD = instrD[15:11];
    //assign WriteDataE = ForwardBE[1] ? (ForwardBE[0] ? 0:ALUOutM):(ForwardBE[0] ? ResultW:RD2E);
    // ============ Modified According to prompt ======== //


	// Below, PipeFtoD and regfile instantiations are given
    // Add other instantiations
    // BE CAREFUL ABOUT THE ORDER OF PARAMETERS!

	PipeFtoD ftd(instr, PCPlus4F, ~StallD, clk, reset, instrD, PCPlus4D);

	regfile rf (clk, RegWriteW, instrD[25:21], instrD[20:16],
            WriteRegW, ResultW, RD1D, RD2D);
    // =============== MY CODE STARTS HERE ================= ///
    // adder adds 4 to the PC
    adder adderPC(PCF, 32'd4, PCPlus4F);

    // sign extended immediate
    signext signExt(instrD[15:0], SignImmD);

    // Decode to Execute pipe
    PipeDtoE dte(FlushE, clk, reset, RegWriteD, MemtoRegD, MemWriteD,
                    ALUControlD,
                    AluSrcD, RegDstD, BranchD,
                    RD1D, RD2D,
                    RsD, RtD, RdD,
                    SignImmD,
                    PCPlus4D,
                    RegWriteE, MemtoRegE, MemWriteE,
                    AluControlE,
                    AluSrcE, RegDstE, BranchE,
                    RD1E, RD2E,
                    RsE, RtE, RdE,
                    SignImmE,
                    PCPlus4E);

    // need 4 muxes at execute stage 2 2:1 and 2 3:1 mux
    // 2:1 muxes one determines ALU input the other one WriteReg
    mux2 #(5) mux2EWriteReg(RtE, RdE,
                 RegDstE,
                  WriteRegE);

    mux2 #(32) mux2ESrcBE(WriteDataE, SignImmE,
                AluSrcE,
                SrcBE);

    // 3:1 muxes needed to compute ALU source
    mux4 #(32) mux3ESrcAE(RD1E, ResultW, ALUOutM, 0,
                  ForwardAE,
                  SrcAE);

    mux4 #(32) mux3EWriteDataE(RD2E, ResultW, ALUOutM, 0,
               ForwardBE,
                WriteDataE);

    // shifter for PC
    sl2 shiftSignImmE(SignImmE,
                SignImmEShifted);

    // adder for PCBranchM
    adder adderPCBranchM(SignImmEShifted, PCPlus4E, PCBranchE);

    // Execute Stage (ALU)
    alu alu1(SrcAE, SrcBE,
               AluControlE,
               ALUOut,
               Zero, reset);

    // execute to memory pipe
    PipeEtoM etm( clk, reset, RegWriteE, MemtoRegE, MemWriteE, BranchE, Zero,
                    ALUOut,
                    WriteDataE,
                    WriteRegE,
                    PCBranchE,
                    RegWriteM, MemtoRegM, MemWriteM, BranchM, ZeroM,
                    ALUOutM,
                    WriteDataM,
                    WriteRegM,
                    PCBranchM);

    // data memory
    dmem dataMemory( clk, MemWriteM,
                 ALUOutM, WriteDataM,
                 ReadDataM);

    // memory to write back pipe
    PipeMtoW mtw(clk, reset, RegWriteM, MemtoRegM,
                    ReadDataM, ALUOutM,
                    WriteRegM,
                    RegWriteW, MemtoRegW,
                    ReadDataW, ALUOutW,
                    WriteRegW);

    // mux to choose ResultW
    mux2 #(32) mux2WResultW( ALUOutW, ReadDataW, 
                MemtoRegW,
                ResultW);
                
    // define a hazard unit
    HazardUnit hazardUnit( RegWriteW,
                 WriteRegW,
                RegWriteM,MemtoRegM,
                WriteRegM,
                RegWriteE,MemtoRegE,
                RsE,RtE,
                RsD,RtD,
                ForwardAE,ForwardBE,
                FlushE,StallD,StallF);
     // instruction memo           
     //imem imem1(PCF[7:2], instr);
    // =============== MY CODE ENDS HERE =================== ///

endmodule



// Hazard Unit with inputs and outputs named
// according to the convention that is followed on the book.

module HazardUnit( input logic RegWriteW,
                input logic [4:0] WriteRegW,
                input logic RegWriteM,MemToRegM,
                input logic [4:0] WriteRegM,
                input logic RegWriteE,MemtoRegE,
                input logic [4:0] rsE,rtE,
                input logic [4:0] rsD,rtD,
                output logic [1:0] ForwardAE,ForwardBE,
                output logic FlushE,StallD,StallF);

    logic lwstall;
    always_comb begin

        // ********************************************************************
        // Here, write equations for the Hazard Logic.
        // If you have troubles, please study pages ~420-430 in your book.
        // ********************************************************************

        // =============== MY CODE STARTS HERE =================== ///
        // for stalling and flushing
        lwstall = ((rsD == rtE) | (rtD == rtE)) & MemtoRegE;
        StallF <= lwstall;
        StallD <= lwstall;
        FlushE <= lwstall;

        // for forwarding
        if ((rsE != 5'd0) & (rsE == WriteRegM) & RegWriteM)
        begin
         ForwardAE = 2'b10;
        end
        else if ((rsE != 5'd0) & (rsE == WriteRegW) & RegWriteW)
        begin
            ForwardAE = 2'b01;
        end
        else
            ForwardAE = 2'b00;
            
        if ((rtE != 5'd0) & (rtE == WriteRegM) & RegWriteM)
        begin
         ForwardBE = 2'b10;
        end
        else if ((rtE != 5'd0) & (rtE == WriteRegW) & RegWriteW)
        begin
            ForwardBE = 2'b01;
        end
        else
            ForwardBE = 2'b00;
        // =============== MY CODE ENDS HERE ===================== ///
    end

endmodule


module mips (input  logic clk, reset,
             output logic[31:0]  PCF,
             input  logic[31:0]  instr,
             output logic[31:0]  aluout, resultW,
             output logic[31:0]  instrOut, WriteDataM,
             output logic StallD, StallF);

    // ********************************************************************
    // You can change the logics below but if you didn't change the signitures of
    // above modules you will need these.
    // ********************************************************************

    logic memtoreg, zero, alusrc, regdst, regwrite, jump, PCSrcM, branch, memwrite;
    logic [31:0] PCPlus4F, PCm, PCBranchM, instrD;
    logic [2:0] alucontrol;
    assign instrOut = instr;

	// ********************************************************************
	// Below, instantiate a controller and a datapath with their new (if modified)
	// signatures and corresponding connections.
    // Also, you might want to instantiate PipeWtoF and pcsrcmux here.
    // Note that this is not the only solution.
    // You can do it in your way as long as it works.
	// ********************************************************************

    // =============== MY CODE STARTS HERE =================== ///

    
    controller c (instrD[31:26], instrD[5:0],
                        memtoreg, memwrite,
                        alusrc,
                        regdst, regwrite,
                        jump,
                        alucontrol,
                        branch);

    datapath dp (clk, reset,
    		     PCF, instr,
    		      regwrite, memtoreg, memwrite,
    		      alucontrol,
    		      alusrc, regdst, branch,
    		      PCSrcM, StallD, StallF,
    		      PCBranchM, PCPlus4F, instrD, aluout, resultW, WriteDataM);

    PipeWtoF wtf(PCm,
            ~StallF, clk, reset,
            PCF);

    mux2 #(32) pcsrcmux(PCPlus4F, PCBranchM,
                PCSrcM,
                PCm);
    // =============== MY CODE ENDS HERE ===================== ///
endmodule


// External instruction memory used by MIPS single-cycle
// processor. It models instruction memory as a stored-program
// ROM, with address as input, and instruction as output
// Modify it to test your own programs.

module imem ( input logic [5:0] addr, output logic [31:0] instr);

// imem is modeled as a lookup table, a stored-program byte-addressable ROM
	always_comb
	   case ({addr,2'b00})		   	// word-aligned fetch
//
// 	***************************************************************************
//	Here, you should paste the test cases that are given to you in lab document.
//  You can write your own test cases and try it as well.
//	Below is the program from the single-cycle lab.
//	***************************************************************************
//  ========= MY TEST WITH SUPPORTED INSTRUCTIONS =============================
//  NOTE: Givan hardware does not support Jump instructions
//
//		address		   instruction
//------------- No Hazard ---------------//
        8'h00:instr = 32'h20080007; // addi $t0, $zero, 7
        8'h04:instr = 32'h20090005; // addi $t1, $zero, 5
        8'h08:instr = 32'h200a0000; // addi $t2, $zero, 0
        8'h0c:instr = 32'h210b000f; // addi $t3, $t0, 15
        8'h10:instr = 32'h01095020; // add $t2, $t0, $t1
        8'h14:instr = 32'h01095025; // or $t2, $t0, $t1
        8'h18:instr = 32'h01095024; // and $t2, $t0, $t1
        8'h1c:instr = 32'h01095022; // sub $t2, $t0, $t1
        8'h20:instr = 32'h0109502a; // slt $t2, $t0, $t1
        8'h24:instr = 32'had280002; // sw $t0, 2($t1)
        8'h28:instr = 32'h8d090000; // lw $t1, 0($t0)
        8'h2c:instr = 32'h1100fff5; // beq $t0, $zero, 1
        8'h30:instr = 32'h200a000a; // addi $t2, $zero, 10
        8'h34:instr = 32'h2009000c; // addi $t1, $zero, 12
        
        //------ Compute Use Hazard -----//
        
        8'h38:instr = 32'h20080005; // addi $t0, $zero, 5
        8'h3c:instr = 32'h21090006; // addi $t1, $t0, 6
        8'h40:instr = 32'h01285020; // add $t2, $t1, $t0
        
        //------  Load Use Hazard -----//
        
        8'h44:instr = 32'h20080005; // addi $t0, $zero, 5
        8'h48:instr = 32'h20090006; // addi $t1, $zero, 6
        8'h4c:instr = 32'h20040001; // addi $a0, $zero, 1
        8'h50:instr = 32'h20050002; // addi $a1, $zero, 2
        8'h54:instr = 32'had280000; // sw $t0, 0($t1)
        8'h58:instr = 32'h8d090001; // lw $t1, 1($t0)
        8'h5c:instr = 32'h01245020; // add $t2, $t1, $a0
        8'h60:instr = 32'h01255022; // sub $t2, $t1, $a1

        // ------  Branch Hazard #always -----//
        
        //8'h00: 32'h20090002; // addi $t1, $zero, 2
        //8'h04: 32'h10000002; // beq $zero, $zero, 2
        //8'h08: 32'h20090005; // addi $t1, $zero, 5
        //8'h0c: 32'h21290006; // addi $t1, $t1, 6
        //8'h10: 32'h20090008; // addi $t1, $zero, 8
        //8'h14: 32'h20040000; // addi $a0, $zero, 0
        //8'h18: 32'h20050000; // addi $a1, $zero, 0
        //8'h1c: 32'hac090000; // sw $t1, 0($zero)
        default:  instr = {32{1'bx}};	// unknown address
        endcase
endmodule


// 	***************************************************************************
//	Below are the modules that you shouldn't need to modify at all..
//	***************************************************************************

module controller(input  logic[5:0] op, funct,
                  output logic     memtoreg, memwrite,
                  output logic     alusrc,
                  output logic     regdst, regwrite,
                  output logic     jump,
                  output logic[2:0] alucontrol,
                  output logic branch);

   logic [1:0] aluop;

   maindec md (op, memtoreg, memwrite, branch, alusrc, regdst, regwrite,
         jump, aluop);

   aludec  ad (funct, aluop, alucontrol);

endmodule

// External data memory used by MIPS single-cycle processor

module dmem (input  logic        clk, we,
             input  logic[31:0]  a, wd,
             output logic[31:0]  rd);

   logic  [31:0] RAM[63:0];

   assign rd = RAM[a[31:2]];    // word-aligned  read (for lw)

   always_ff @(posedge clk)
     if (we)
       RAM[a[31:2]] <= wd;      // word-aligned write (for sw)

endmodule

module maindec (input logic[5:0] op,
	              output logic memtoreg, memwrite, branch,
	              output logic alusrc, regdst, regwrite, jump,
	              output logic[1:0] aluop );
   logic [8:0] controls;

   assign {regwrite, regdst, alusrc, branch, memwrite,
                memtoreg,  aluop, jump} = controls;

  always_comb
    case(op)
      6'b000000: controls <= 9'b110000100; // R-type
      6'b100011: controls <= 9'b101001000; // LW
      6'b101011: controls <= 9'b001010000; // SW
      6'b000100: controls <= 9'b000100010; // BEQ
      6'b001000: controls <= 9'b101000000; // ADDI
      6'b000010: controls <= 9'b000000001; // J
      default:   controls <= 9'bxxxxxxxxx; // illegal op
    endcase
endmodule

module aludec (input    logic[5:0] funct,
               input    logic[1:0] aluop,
               output   logic[2:0] alucontrol);
  always_comb
    case(aluop)
      2'b00: alucontrol  = 3'b010;  // add  (for lw/sw/addi)
      2'b01: alucontrol  = 3'b110;  // sub   (for beq)
      default: case(funct)          // R-TYPE instructions
          6'b100000: alucontrol  = 3'b010; // ADD
          6'b100010: alucontrol  = 3'b110; // SUB
          6'b100100: alucontrol  = 3'b000; // AND
          6'b100101: alucontrol  = 3'b001; // OR
          6'b101010: alucontrol  = 3'b111; // SLT
          default:   alucontrol  = 3'bxxx; // ???
        endcase
    endcase
endmodule

module regfile (input    logic clk, we3,
                input    logic[4:0]  ra1, ra2, wa3,
                input    logic[31:0] wd3,
                output   logic[31:0] rd1, rd2);

  logic [31:0] rf [31:0];

  // three ported register file: read two ports combinationally
  // write third port on rising edge of clock. Register0 hardwired to 0.

  always_ff @(negedge clk)
     if (we3)
         rf [wa3] <= wd3;

  assign rd1 = (ra1 != 0) ? rf [ra1] : 0;
  assign rd2 = (ra2 != 0) ? rf[ ra2] : 0;

endmodule

module alu(input  logic [31:0] a, b,
           input  logic [2:0]  alucont,
           output logic [31:0] result,
           output logic zero, input logic reset);

    always_comb begin
        case(alucont)
            3'b010: result = a + b;
            3'b110: result = a - b;
            3'b000: result = a & b;
            3'b001: result = a | b;
            3'b111: result = (a < b) ? 1 : 0;
            default: result = {32{1'bx}};
        endcase
        if(reset)
            result <= 0;
        end

    assign zero = (result == 0) ? 1'b1 : 1'b0;

endmodule

module adder (input  logic[31:0] a, b,
              output logic[31:0] y);

     assign y = a + b;
endmodule

module sl2 (input  logic[31:0] a,
            output logic[31:0] y);

     assign y = {a[29:0], 2'b00}; // shifts left by 2
endmodule

module signext (input  logic[15:0] a,
                output logic[31:0] y);

  assign y = {{16{a[15]}}, a};    // sign-extends 16-bit a
endmodule

// parameterized register
module flopr #(parameter WIDTH = 8)
              (input logic clk, reset,
	       input logic[WIDTH-1:0] d,
               output logic[WIDTH-1:0] q);

  always_ff@(posedge clk, posedge reset)
    if (reset) q <= 0;
    else       q <= d;
endmodule


// paramaterized 2-to-1 MUX
module mux2 #(parameter WIDTH = 8)
             (input  logic[WIDTH-1:0] d0, d1,
              input  logic s,
              output logic[WIDTH-1:0] y);

   assign y = s ? d1 : d0;
endmodule

// paramaterized 4-to-1 MUX
module mux4 #(parameter WIDTH = 8)
             (input  logic[WIDTH-1:0] d0, d1, d2, d3,
              input  logic[1:0] s,
              output logic[WIDTH-1:0] y);

   assign y = s[1] ? (s[0] ? d3 : d2) : (s[0] ? d1 : d0);
endmodule

`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: Bilkent University
// Engineer: Zeynep Cankara
// 
// Create Date: 04/15/2019 
// Design Name: CS224
// Module Name: top_tb
// Project Name: Pipelined preocessor testbench
// Target Devices: BASYS3 FPGA
//////////////////////////////////////////////////////////////////////////////////


module top_tb();

    // instance variables
    logic clk, reset;
    logic [31:0] instrD, resultW, WriteDataM, pc;
    logic MemWriteM, StallD, StallF;
    logic [31:0] aluout;
    
    // device under test initialization
    top dut(clk, reset,
    instrD, resultW, aluout, WriteDataM, pc,
    MemWriteM, StallD, StallF
    );
    
    //mips dut(clk, reset,
      //       pc,
        //     instr,
          //   aluout, resultW,
           //  instrD, WriteDataM,
            // StallD, StallF);
    
    // start test
    initial
        begin
        clk = 0;
        reset = 1;
        #20ns; 
        reset = 0;
        end
    
    always
        begin
            #10;
            clk = ~clk; // 10 ns clock rise edge
        end
        
endmodule

`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: Bilkent University
// Engineer: Zeynep Cankara
// 
// Create Date: 15/04/2019
// Design Name: Top module for simulation pipelined processor
// Module Name: top
// Project Name: CS224 Lab5
// Target Devices: BASYS3 FPGA
// Description: Pipelined processor implementation in MIPS
// 
// Revision 0.01 - File Created
// 
//////////////////////////////////////////////////////////////////////////////////


module top(
    input logic clk, reset,
    output logic[31:0] instrD, resultW, aluout, WriteDataM, pc,
    output logic MemWriteM, StallD, StallF
    );
    // write the ones you want to see in simulation as ouput
    // stalls are for debug puposes
    
    // others just define as logic
    logic [31:0]  instr;
    // control system through a reset button

    // instantiate mips processor
    mips mips1(clk, reset,
             pc,
             instr,
             aluout, resultW,
             instrD, WriteDataM,
             StallD, StallF);
             
     // instantiate instruction memory
     imem imem1(pc[7:2],
                instr);
     // instantiate data memory
     //dmem demem1( clk, MemWriteM,
           //  aluout, WriteDataM,
           //  ReadDataW);
     
endmodule