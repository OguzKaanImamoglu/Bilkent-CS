module decoder(input a,b,
               output y0, y1, y2, y3);
       assign y3 = a & b;
       assign y2 = a & ~b;
       assign y1 = ~a & b;
       assign y0 = ~a & ~b;   
endmodule

/////////

module mux(input a, b, c, d, x, y,
           output out);

    assign out = ( a & ~x & ~y) | ( b & ~x & y) | ( c & x & ~y) | ( d & x & y);        
           
endmodule

/////////

module big_mux(input d0, d1, d2, d3, d4, d5, d6, d7, s0, s1, s2,
               output out);
     wire w1,w2,w3,w4,w5;
     mux m1(d0,d1,d2,d3,s0,s1,w1);
     mux m2(d4,d5,d6,d7,s0,s1,w2);
     
     not(w3,s2);
     and(w4,w1,w3);
     and(w5,w2,s2);
     or(out,w4,w5);
             
endmodule

///////////////////////////////////

module thefunction(input A, B, C, D,
                   output Y);
 wire w1;
 not(w1,D);      
big_mux b2(D, w1, D, D, 1'b1, w1, w1, D, B, C, A, Y);             
                                               
endmodule



module testbench_big_mux();
    logic d0,d1,d2,d3,d4,d5,d6,d7,s0,s1,s2,out;
    big_mux tbmux(d0,d1,d2,d3,d4,d5,d6,d7,s1,s0,s2,out);
    
    initial begin
    d0 = 0; d1 = 0; d2 = 0; d3 = 0; d4 = 0; d5 = 0; d6 = 0; d7 = 0; s2 = 0; s1 = 0; s0 = 0; #10;
    d0 = 1; d1 = 0; d2 = 0; d3 = 0; d4 = 0; d5 = 0; d6 = 0; d7 = 0; s2 = 0; s1 = 0; s0 = 0; #10;
    
    d0 = 0; d1 = 0; d2 = 0; d3 = 0; d4 = 0; d5 = 0; d6 = 0; d7 = 0; s2 = 1; s1 = 0; s0 = 0; #10;
    d0 = 0; d1 = 0; d2 = 0; d3 = 0; d4 = 1; d5 = 0; d6 = 0; d7 = 0; s2 = 1; s1 = 0; s0 = 0; #10;
    
    d0 = 0; d1 = 0; d2 = 0; d3 = 0; d4 = 0; d5 = 0; d6 = 0; d7 = 0; s2 = 0; s1 = 0; s0 = 1; #10;
    d0 = 0; d1 = 1; d2 = 0; d3 = 0; d4 = 0; d5 = 0; d6 = 0; d7 = 0; s2 = 0; s1 = 0; s0 = 1; #10;
    
    d0 = 0; d1 = 0; d2 = 0; d3 = 0; d4 = 0; d5 = 0; d6 = 0; d7 = 0; s2 = 1; s1 = 1; s0 = 1; #10;
    d0 = 0; d1 = 0; d2 = 0; d3 = 0; d4 = 0; d5 = 0; d6 = 0; d7 = 1; s2 = 1; s1 = 1; s0 = 1; #10;
    
    end
        
endmodule


module tbe();
logic A, B, C, D;
thefunction tf( A, B, C, D, Y);

initial begin

A = 0;
B = 0;
C = 0;
D = 0; 
#10;

A = 0;
B = 0;
C = 0;
D = 1;
#10;

A = 0;
B = 0;
C = 1;
D = 0;
#10;

A = 0;
B = 0;
C = 1;
D = 1;
#10;

A = 0;
B = 1;
C = 0;
D = 0; 
#10;

A = 0;
B = 1;
C = 0;
D = 1;
#10;

A = 0;
B = 1;
C = 1;
D = 0; 
#10;

A = 0;
B = 1;
C = 1;
D = 1;
#10;

A = 1;
B = 0;
C = 0;
D = 0; 
#10;

A = 1;
B = 0;
C = 0;
D = 1;
#10;

A = 1;
B = 0;
C = 1;
D = 0; 
#10;

A = 1;
B = 0;
C = 1;
D = 1;
#10;

A = 1;
B = 1;
C = 0;
D = 0; 
#10;

A = 1;
B = 1;
C = 0;
D = 1;
#10;

A = 1;
B = 1;
C = 1;
D = 0; 
#10;

A = 1;
B = 1;
C = 1;
D = 1;
#10;
end

endmodule


module testbench_mux();
    logic a,b,c,d,x,y,out;
    mux m(a,b,c,d,x,y,out);
    
    initial begin
    a = 0; b = 0; c = 0; d = 0; x = 0; y = 0; #10;
    a = 1; b = 0; c = 0; d = 0; x = 0; y = 0; #10;
    a = 0; b = 0; c = 0; d = 0; x = 0; y = 1; #10;
    a = 0; b = 1; c = 0; d = 0; x = 0; y = 1; #10;
    a = 0; b = 0; c = 0; d = 0; x = 1; y = 0; #10;
    a = 0; b = 0; c = 1; d = 0; x = 1; y = 0; #10;
    a = 0; b = 0; c = 0; d = 0; x = 1; y = 1; #10;
    a = 0; b = 0; c = 0; d = 1; x = 1; y = 1; #10;
    
    end
        
endmodule


module tb_decoder();

    logic a,b,y0,y1,y2,y3;
    decoder tb(a,b,y0,y1,y2,y3);
    
    initial begin
    
    a = 0;
    b = 0;
    #10;
    
    a = 0;
    b = 1;
    #10;
    
    a = 1;
    b = 0;
    #10;
    
    a = 1;
    b = 1;
    #10;
    end

endmodule
