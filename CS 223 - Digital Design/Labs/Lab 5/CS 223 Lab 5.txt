****Simulation****

module testbench();

logic clk, reset, next;
logic [3:0] A, B;
logic [7:0] Y;
logic [6:0] seg; 
logic dp;
logic [3:0] an;

four_four_multiplier mux(clk, reset, next, A, B, Y, seg, dp, an);

always 
begin
clk = 1; #10; clk = 0; #10;
end

initial begin
next = 0; A = 13; B = 10;
  reset = 0; #30;
  reset = 1; #30;
  reset = 0; #25;
  next = 0; #80;
  next = 1; #80;
  next = 0; #80;
  next = 1; #80;
  next = 0; #80;
  next = 1; #80;
  next = 0; #80;
  next = 1; #80;
  next = 0; #80;
  end
endmodule



***Design***


module four_four_multiplier(  input logic clk, reset, next, 
                    input logic [3:0] A, B, 
                    // output logic [7:0] Y,
                    output logic [6:0]seg, 
                    output logic dp,
                    output logic [3:0] an );

        logic  [7:0] Y;
       logic [7:0] b8;
       assign b8 = {4'b0, B};
       logic [7:0] q,sum, o;
       logic LSB, shift, store_acc, next_step, store_input;

       //debounce d( next, clk, next_step);
       assign next_step = next  


       fsm controller(clk, reset, next_step, LSB, store_acc, shift, store_input );
       adder adder(q, o, sum);
       accumulator acc( clk, reset, store_acc, sum, o);   

       logic [3:0] in0 = {Y[3] , Y[2], Y[1] , Y[0] };
       logic [3:0] in1 = {Y[7] , Y[6], Y[5] , Y[4] };
       logic [3:0] zero = 4'b0;
       SevSeg_4digit ss4d( clk, in0 , in1, zero, zero,seg,dp,an);   
endmodule     



  

module accumulator( input logic clk, reset, store_acc, [7:0] sum,
                    output logic [7:0] Y);
                      
     always_ff@(posedge clk, posedge reset)
     if(reset) Y = 8'b0;
     else if( store_acc ) Y = sum;
     else if(~store_acc) Y = Y;
     else Y = 8'b0; 
endmodule

module adder(input logic [7:0] K, L,
              output logic [7:0] sum); 
     assign sum = K + L;

endmodule



module regB( input logic clk, shift, store_input, [7:0] B,
                output logic [7:0] q);
                
       always_ff@(posedge clk)   
       if(store_input) q <= B;
       else if(shift) q <= {q[6:0],1'b0};  
       else q <= q;         
endmodule

module regA( input logic clk, shift, store_input, [3:0] A,
                output logic LSB ); 
       logic [3:0] q;
       
       always_ff@(posedge clk)   
       if(store_input) q <= A;
       else if(shift) q <= {1'b0, q[3:1]};  
       else q <= q; 
       assign LSB = q[0];     
endmodule
        


module fsm(  input logic clk, reset, next_step, LSB, 
                      output logic store_acc, shift, store_input );              
      typedef enum {S0, S1, S2, S3, S4} statetype;
      statetype current, nextstate;  
      
      
      always_ff@( posedge clk, posedge reset )
      if( reset ) current <= S0;
      else current <= nextstate;
      
      always_comb 
      casez(current)
       S0: nextstate <= S1;
       S1: if( next_step == 1 & LSB == 1 ) nextstate <= S3;
           else if( next_step == 1 & LSB == 0 ) nextstate <= S2;
           else nextstate <= S1;
       S2: nextstate <= S4;
       S3: nextstate <= S4; 
       S4: if( next_step == 0 ) nextstate <= S1;
           else nextstate <= S4;      
       default: nextstate <= S0;      
      endcase    
      
      //output 
      assign store_input = ( current == S0 );
      assign shift = ( current == S2 | current == S3 );         
      assign store_acc = (current == S3);
     
                   
endmodule


//*** I took debouncer from internet

module debouncer(input pb_1,clk,output pb_out);
wire slow_clk;
wire Q1,Q2,Q2_bar;
clock_div u1(clk,slow_clk);
my_dff d1(slow_clk, pb_1,Q1 );
my_dff d2(slow_clk, Q1,Q2 );
assign Q2_bar = ~Q2;
assign pb_out = Q1 & Q2_bar;
endmodule


/*** I took seven segment display from Lab4_Pdf

// this module shows 4 decimal numbers on 4-digit 7-Segment.  
// 4 digits are scanned with high speed, then you do not notice that every time 
// only one of them is ON. dp is always off.

// LED positions inside 7-segment
//    A -->  /seg[6]
//  F   B
//    G -->  /seg[0]
//  E   C
//    D   DP

// digit positions on Basys3 :
// in3(left), in2, in1, in0(right)


module SevSeg_4digit(
 input clk,
 input [3:0] in0, in1, in2, in3, //user inputs for each digit (hexadecimal value)
 output [6:0]seg, logic dp, // just connect them to FPGA pins (individual LEDs).
 output [3:0] an   // just connect them to FPGA pins (enable vector for 4 digits active low)
 );
 
// divide system clock (100Mhz for Basys3) by 2^N using a counter, which allows us to multiplex at lower speed
localparam N = 18;
logic [N-1:0] count = {N{1'b0}}; //initial value
always@ (posedge clk)
	count <= count + 1;

 
logic [3:0]digit_val; // 7-bit register to hold the current data on output
logic [3:0]digit_en;  //register for the 4 bit enable
 
always@ (*)
 begin
 digit_en = 4'b1111; //default
 digit_val = in0; //default
 
  case(count[N-1:N-2]) //using only the 2 MSB's of the counter 
    
   2'b00 :  //select first 7Seg.
    begin
     digit_val = in0;
     digit_en = 4'b1110;
    end
    
   2'b01:  //select second 7Seg.
    begin
     digit_val = in1;
     digit_en = 4'b1101;
    end
    
   2'b10:  //select third 7Seg.
    begin
     digit_val = in2;
     digit_en = 4'b1011;
    end
     
   2'b11:  //select forth 7Seg.
    begin
     digit_val = in3;
     digit_en = 4'b0111;
    end
  endcase
 end
 

//Convert digit number to LED vector. LEDs are active low.
logic [6:0] sseg_LEDs; 
always @(*)
 begin 
  sseg_LEDs = 7'b1111111; //default
  case(digit_val)
   4'd0 : sseg_LEDs = 7'b1000000; //to display 0
   4'd1 : sseg_LEDs = 7'b1111001; //to display 1
   4'd2 : sseg_LEDs = 7'b0100100; //to display 2
   4'd3 : sseg_LEDs = 7'b0110000; //to display 3
   4'd4 : sseg_LEDs = 7'b0011001; //to display 4
   4'd5 : sseg_LEDs = 7'b0010010; //to display 5
   4'd6 : sseg_LEDs = 7'b0000010; //to display 6
   4'd7 : sseg_LEDs = 7'b1111000; //to display 7
   4'd8 : sseg_LEDs = 7'b0000000; //to display 8
   4'd9 : sseg_LEDs = 7'b0010000; //to display 9
   4'd10: sseg_LEDs = 7'b0001000; //to display a
   4'd11: sseg_LEDs = 7'b0000011; //to display b
   4'd12: sseg_LEDs = 7'b1000110; //to display c
   4'd13: sseg_LEDs = 7'b0100001; //to display d
   4'd14: sseg_LEDs = 7'b0000110; //to display e
   4'd15: sseg_LEDs = 7'b0001110; //to display f   
   default : sseg_LEDs = 7'b0111111; //dash
  endcase
 end
 
assign an = digit_en;
assign seg = sseg_LEDs; 
assign dp = 1'b1; //turn dp off
 
 
endmodule





